name: Create Release Candidate

description: Create Release Candidate

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: Change Owner of Container Working Directory
      run: chown -R $(id -u):$(id -g) $PWD
      shell: bash

    - id: check-branch
      run: |
        npm install version
        new_version=v$(npm version minor)
        echo "$new_version" >> "$GITHUB_OUTPUT"
      shell: bash

    - id: check-branch-exists
      uses: GuillaumeFalourd/branch-exists@v1
      with:
        branch: ${{steps.check-branch.outputs.new_version}}

    - if: steps.check-branch-exists.outputs.exists == 'true'
      run: echo '<BRANCH_NAME> Branch exists'
      shell: bash

    - if: steps.check-branch-exists.outputs.exists == 'false'
      run: echo '<BRANCH_NAME> Branch NOT FOUND'
      shell: bash

    # - name: check rc and merge
    #   run: |
    #     #!/usr/bin/env bash

    #     git config user.name "GitHub Actions Bot"
    #     git config user.email "devops@atarb2b.com"
        
    #     echo "CUR_FC=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
    #     # current_fc=$(git rev-parse --abbrev-ref HEAD)
    #     # echo $current_fc
    #     echo "passei 1"
    #     echo $CUR_FC
        
    #     echo "CUR_FC_HASH=$(git rev-parse --short $CUR_FC)" >> $GITHUB_ENV
    #     # current_fc_hash=$(git rev-parse --short $current_fc)
    #     # echo $current_fc_hash
    #     echo "passei 2"
    #     echo $CUR_FC_HASH
        
    #     echo "CUR_RC=$(git branch -a --no-color | grep "rc" | head -n 1 | cut -c 11-)" >> $GITHUB_ENV
    #     # current_rc=$(git branch -a --no-color | grep "rc" | head -n 1 | cut -c 11-)
    #     # echo $current_rc
    #     echo "passei 3"
    #     echo $CUR_RC

    #     # current_rc_hash=$(git rev-parse --short $current_rc)
    #     # echo "passei 4"
    #     # echo $current_rc_hash

    #     echo "Current Release Candidate is $current_rc - $current_rc_hash"
    #     echo "..............................."
        
    #     if [ "$current_fc_hash" = "$current_rc_hash" ]; then
    #       echo "ERROR......."
    #       exit 1
    #     fi

    #     if [ -z "$current_rc_hash" ]; then

    #         npm install version
    #         new_version=$(npm version minor)

    #         echo "New Release Candidate is rc/$new_version"

    #         git checkout -b rc/$new_version || echo
    #         git push --set-upstream origin rc/$new_version || echo

    #         echo "Open PR from $current_fc to rc/$new_version."
    #         gh pr create --base=rc/$new_version --head=$current_fc --title="[FC] branch $current_fc to RC/$new_version" --body="Pull Request FC to RC"

    #     else
            
    #         echo "The $current_rc alredy exists, opening pr."
    #         gh pr create --base=$current_rc --head=$current_fc --title="[FC] branch $current_fc to RC/$current_rc" --body="Pull Request FC to RC"

    #     fi
    #   shell: bash
