name: Create Release Candidate

description: Create Release Candidate

inputs:
  ORIGIN:
    required: true
    description: Origem
  GITHUB_TOKEN:
    required: true
    description: GITHUB_TOKEN

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: Change Owner of Container Working Directory
      run: chown -R $(id -u):$(id -g) $PWD
      shell: bash

    - name: Check Current Branch
      id: current
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "devops@atarb2b.com"
        echo "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
      shell: bash

    - if: ${{ inputs.ORIGIN }} == 'fc'
      name: bump
      uses: anothrNick/github-tag-action@1.61.0
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        DEFAULT_BUMP: "#minor"

    - if: ${{ inputs.ORIGIN }} == 'fix'
      name: bump
      uses: anothrNick/github-tag-action@1.61.0
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        DEFAULT_BUMP: "#patch"
        PRERELEASE: "true"
        VERBOSE: "true"

    - name: check
      run: echo ${{ steps.bump.outputs.new_tag }}
      shell: bash
    
    # - id: check-branch-exists
    #   uses: GuillaumeFalourd/branch-exists@v1
    #   with:
    #     branch: ${{env.TAG}}

    # - if: steps.check-branch-exists.outputs.exists == 'true'
    #   run: |        
        
    #     baseBranch=${{ steps.current.outputs.CURRENT_BRANCH }}
    #     secondaryBranch=rc/${{env.TAG}}

    #     commitDiffCount=''
    #     baseBranchPath=$(git branch -r | grep "$baseBranch" | xargs)
    #     secondaryBranchPath=$(git branch -r | grep "$secondaryBranch" | xargs)
    #     commitDiffCount=$(git log --oneline "$secondaryBranchPath" \^"$baseBranchPath" | wc -l)
        
    #     if [[ "$commitDiffCount" -eq 0 ]]; then
        
    #       echo "------------  NOTHING TO MERGE  ------------"
        
    #     else
          
    #       echo "------------  Open PR from ${{ steps.current.outputs.CURRENT_BRANCH }} to ${{env.TAG}}.  ------------"
    #       gh pr create --base=rc/${{env.TAG}} --head=${{ steps.current.outputs.CURRENT_BRANCH }} --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{env.TAG}} " --body="Pull Request FC to RC"
        
    #     fi
      
    #   shell: bash

    # - if: steps.check-branch-exists.outputs.exists == 'false'
    #   run: |
    #     echo "New Release Candidate is rc/${{env.TAG}}"
    #     git checkout main || echo
    #     git checkout -b rc/${{env.TAG}} || echo
    #     git push --set-upstream origin rc/${{env.TAG}} || echo
        
    #     gh pr create --base=rc/${{env.TAG}} --head=${{ steps.current.outputs.CURRENT_BRANCH }} --title="[FC] branch ${{ steps.current.outputs.CURRENT_BRANCH }} to RC/${{env.TAG}} " --body="Pull Request FC to RC"

    #   shell: bash
